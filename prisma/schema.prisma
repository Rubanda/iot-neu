datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  age           Int?
  gender        Gender? 
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  Profile   Profile?
  Email     Email?
  predictions Prediction[]
  uploads     Upload[]
  consents    Consent[]
  healthHistory HealthHistory[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model HealthHistory {
  id             String    @id @default(cuid())
  userId         String  
  user           User      @relation(fields: [userId], references: [id])
  skinConditions Json?      // Will store array as JSON
  allergies      Json?      // Will store array as JSON
  otherDetails   String?  @db.VarChar(455)
  createdAt      DateTime  @default(now())

  @@index([userId])
}

model Prediction {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  uploadId       String    // Link to the related uploaded image
  upload         Upload    @relation(fields: [uploadId], references: [id])
  result         String    // Classification result (e.g., "monkeypox", "normal", "other rash")
  confidence     Float     // Confidence level of the prediction
  recommendation String?   // Recommendations for next steps
  createdAt      DateTime  @default(now())

  @@index([userId])
  @@index([uploadId])
}
model Upload {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  imageUrl       String    // Path or URL to the uploaded image
  metadata       Json?     // Metadata for the image (e.g., timestamp, resolution)
  createdAt      DateTime  @default(now())
  Prediction Prediction[]
  @@index([userId])
}

model Consent {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  agreedToTerms  Boolean
  agreedToPrivacyPolicy Boolean
  createdAt      DateTime  @default(now())

  @@index([userId])
}
model Profile {
  id        Int      @id @default(autoincrement())
  department    String?
  studentId       String?
  university      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @db.VarChar(255)
  newsletter Boolean  @default(false)
  marketing Boolean  @default(false)
  transactional Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId   String?  @unique 
  // @@index([userId])
}