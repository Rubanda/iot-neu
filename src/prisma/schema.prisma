datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  Post      Post[]
  Profile   Profile?
  Social    Social[]
  Event     Event[]
  UserEvent UserEvent[]
  Email     Email?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Profile {
  id        Int      @id @default(autoincrement())
  skills    String?
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Social {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  image       String   @db.VarChar(255)
  location    String   @db.VarChar(255)
  description String   @db.VarChar(255)
  content     String   @db.VarChar(255)
  video       String   @db.VarChar(255)
  duration    String   @db.VarChar(255)
  published   String   @db.VarChar(255)
  exercise    String   @db.VarChar(255)
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]

  UserEvent UserEvent[]
}

model UserEvent {
  userId  String
  eventId Int
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
  @@index([userId])
  @@index([eventId])
}
model Email {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @db.VarChar(255)
  newsletter Boolean  @default(false)
  marketing Boolean  @default(false)
  transactional Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId   String?  @unique 
  // @@index([userId])
}